/*
 * generated by Xtext 2.10.0
 */
package rasman.robot.mars.des.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import rasman.robot.mars.des.dsl.ColorSensor;
import rasman.robot.mars.des.dsl.ColorValue;
import rasman.robot.mars.des.dsl.DslPackage;
import rasman.robot.mars.des.dsl.Ignorables;
import rasman.robot.mars.des.dsl.Mission;
import rasman.robot.mars.des.dsl.Task;
import rasman.robot.mars.des.dsl.TouchSensor;
import rasman.robot.mars.des.dsl.UltrasonicSensor;
import rasman.robot.mars.des.dsl.timeUnitValue;
import rasman.robot.mars.des.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DslPackage.COLOR_SENSOR:
				sequence_ColorSensor(context, (ColorSensor) semanticObject); 
				return; 
			case DslPackage.COLOR_VALUE:
				sequence_ColorValue(context, (ColorValue) semanticObject); 
				return; 
			case DslPackage.IGNORABLES:
				sequence_Ignorables(context, (Ignorables) semanticObject); 
				return; 
			case DslPackage.MISSION:
				sequence_Mission(context, (Mission) semanticObject); 
				return; 
			case DslPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			case DslPackage.TOUCH_SENSOR:
				sequence_TouchSensor(context, (TouchSensor) semanticObject); 
				return; 
			case DslPackage.ULTRASONIC_SENSOR:
				sequence_UltrasonicSensor(context, (UltrasonicSensor) semanticObject); 
				return; 
			case DslPackage.TIME_UNIT_VALUE:
				sequence_timeUnitValue(context, (timeUnitValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     SensorType returns ColorSensor
	 *     ColorSensor returns ColorSensor
	 *
	 * Constraint:
	 *     ((distinct?='New'? key=ColorValue) | (distinct?='New'? keys+=ColorValue+))
	 */
	protected void sequence_ColorSensor(ISerializationContext context, ColorSensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ColorValue returns ColorValue
	 *
	 * Constraint:
	 *     color=Colors
	 */
	protected void sequence_ColorValue(ISerializationContext context, ColorValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.COLOR_VALUE__COLOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.COLOR_VALUE__COLOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColorValueAccess().getColorColorsEnumRuleCall_0(), semanticObject.getColor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Ignorables returns Ignorables
	 *
	 * Constraint:
	 *     AVOID_OBJECTS='AvoidObjects'
	 */
	protected void sequence_Ignorables(ISerializationContext context, Ignorables semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.IGNORABLES__AVOID_OBJECTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.IGNORABLES__AVOID_OBJECTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIgnorablesAccess().getAVOID_OBJECTSAvoidObjectsKeyword_0(), semanticObject.getAVOID_OBJECTS());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Mission returns Mission
	 *
	 * Constraint:
	 *     tasks+=Task+
	 */
	protected void sequence_Mission(ISerializationContext context, Mission semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         sensor=SensorType? 
	 *         action+=Actions+ 
	 *         nrOfTimes=INT? 
	 *         ignoreBehavior=Ignorables? 
	 *         (time=INT timeunit=timeUnitValue)?
	 *     )
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SensorType returns TouchSensor
	 *     TouchSensor returns TouchSensor
	 *
	 * Constraint:
	 *     key=TouchSensorSides
	 */
	protected void sequence_TouchSensor(ISerializationContext context, TouchSensor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TOUCH_SENSOR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TOUCH_SENSOR__KEY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTouchSensorAccess().getKeyTouchSensorSidesEnumRuleCall_3_0(), semanticObject.getKey());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SensorType returns UltrasonicSensor
	 *     UltrasonicSensor returns UltrasonicSensor
	 *
	 * Constraint:
	 *     (comparator=CompareOperator distance=DECIMAL)
	 */
	protected void sequence_UltrasonicSensor(ISerializationContext context, UltrasonicSensor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ULTRASONIC_SENSOR__COMPARATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ULTRASONIC_SENSOR__COMPARATOR));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ULTRASONIC_SENSOR__DISTANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ULTRASONIC_SENSOR__DISTANCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUltrasonicSensorAccess().getComparatorCompareOperatorEnumRuleCall_3_0(), semanticObject.getComparator());
		feeder.accept(grammarAccess.getUltrasonicSensorAccess().getDistanceDECIMALTerminalRuleCall_4_0(), semanticObject.getDistance());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     timeUnitValue returns timeUnitValue
	 *
	 * Constraint:
	 *     unit=timeUnit
	 */
	protected void sequence_timeUnitValue(ISerializationContext context, timeUnitValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TIME_UNIT_VALUE__UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TIME_UNIT_VALUE__UNIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeUnitValueAccess().getUnitTimeUnitEnumRuleCall_0(), semanticObject.getUnit());
		feeder.finish();
	}
	
	
}
