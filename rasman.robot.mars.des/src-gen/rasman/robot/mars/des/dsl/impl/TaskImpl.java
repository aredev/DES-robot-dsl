/**
 * generated by Xtext 2.10.0
 */
package rasman.robot.mars.des.dsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import rasman.robot.mars.des.dsl.Actions;
import rasman.robot.mars.des.dsl.DslPackage;
import rasman.robot.mars.des.dsl.Ignorables;
import rasman.robot.mars.des.dsl.SensorType;
import rasman.robot.mars.des.dsl.Task;
import rasman.robot.mars.des.dsl.timeUnitValue;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Task</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link rasman.robot.mars.des.dsl.impl.TaskImpl#getName <em>Name</em>}</li>
 *   <li>{@link rasman.robot.mars.des.dsl.impl.TaskImpl#getSensor <em>Sensor</em>}</li>
 *   <li>{@link rasman.robot.mars.des.dsl.impl.TaskImpl#getAction <em>Action</em>}</li>
 *   <li>{@link rasman.robot.mars.des.dsl.impl.TaskImpl#getNrOfTimes <em>Nr Of Times</em>}</li>
 *   <li>{@link rasman.robot.mars.des.dsl.impl.TaskImpl#getIgnoreBehavior <em>Ignore Behavior</em>}</li>
 *   <li>{@link rasman.robot.mars.des.dsl.impl.TaskImpl#getTime <em>Time</em>}</li>
 *   <li>{@link rasman.robot.mars.des.dsl.impl.TaskImpl#getTimeunit <em>Timeunit</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TaskImpl extends MinimalEObjectImpl.Container implements Task
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSensor() <em>Sensor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSensor()
   * @generated
   * @ordered
   */
  protected SensorType sensor;

  /**
   * The cached value of the '{@link #getAction() <em>Action</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAction()
   * @generated
   * @ordered
   */
  protected EList<Actions> action;

  /**
   * The default value of the '{@link #getNrOfTimes() <em>Nr Of Times</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNrOfTimes()
   * @generated
   * @ordered
   */
  protected static final int NR_OF_TIMES_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getNrOfTimes() <em>Nr Of Times</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNrOfTimes()
   * @generated
   * @ordered
   */
  protected int nrOfTimes = NR_OF_TIMES_EDEFAULT;

  /**
   * The cached value of the '{@link #getIgnoreBehavior() <em>Ignore Behavior</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIgnoreBehavior()
   * @generated
   * @ordered
   */
  protected Ignorables ignoreBehavior;

  /**
   * The default value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected static final int TIME_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected int time = TIME_EDEFAULT;

  /**
   * The cached value of the '{@link #getTimeunit() <em>Timeunit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeunit()
   * @generated
   * @ordered
   */
  protected timeUnitValue timeunit;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TaskImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.Literals.TASK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TASK__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SensorType getSensor()
  {
    return sensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSensor(SensorType newSensor, NotificationChain msgs)
  {
    SensorType oldSensor = sensor;
    sensor = newSensor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.TASK__SENSOR, oldSensor, newSensor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSensor(SensorType newSensor)
  {
    if (newSensor != sensor)
    {
      NotificationChain msgs = null;
      if (sensor != null)
        msgs = ((InternalEObject)sensor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.TASK__SENSOR, null, msgs);
      if (newSensor != null)
        msgs = ((InternalEObject)newSensor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.TASK__SENSOR, null, msgs);
      msgs = basicSetSensor(newSensor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TASK__SENSOR, newSensor, newSensor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Actions> getAction()
  {
    if (action == null)
    {
      action = new EDataTypeEList<Actions>(Actions.class, this, DslPackage.TASK__ACTION);
    }
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getNrOfTimes()
  {
    return nrOfTimes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNrOfTimes(int newNrOfTimes)
  {
    int oldNrOfTimes = nrOfTimes;
    nrOfTimes = newNrOfTimes;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TASK__NR_OF_TIMES, oldNrOfTimes, nrOfTimes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Ignorables getIgnoreBehavior()
  {
    return ignoreBehavior;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIgnoreBehavior(Ignorables newIgnoreBehavior, NotificationChain msgs)
  {
    Ignorables oldIgnoreBehavior = ignoreBehavior;
    ignoreBehavior = newIgnoreBehavior;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.TASK__IGNORE_BEHAVIOR, oldIgnoreBehavior, newIgnoreBehavior);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIgnoreBehavior(Ignorables newIgnoreBehavior)
  {
    if (newIgnoreBehavior != ignoreBehavior)
    {
      NotificationChain msgs = null;
      if (ignoreBehavior != null)
        msgs = ((InternalEObject)ignoreBehavior).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.TASK__IGNORE_BEHAVIOR, null, msgs);
      if (newIgnoreBehavior != null)
        msgs = ((InternalEObject)newIgnoreBehavior).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.TASK__IGNORE_BEHAVIOR, null, msgs);
      msgs = basicSetIgnoreBehavior(newIgnoreBehavior, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TASK__IGNORE_BEHAVIOR, newIgnoreBehavior, newIgnoreBehavior));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getTime()
  {
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTime(int newTime)
  {
    int oldTime = time;
    time = newTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TASK__TIME, oldTime, time));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public timeUnitValue getTimeunit()
  {
    return timeunit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTimeunit(timeUnitValue newTimeunit, NotificationChain msgs)
  {
    timeUnitValue oldTimeunit = timeunit;
    timeunit = newTimeunit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.TASK__TIMEUNIT, oldTimeunit, newTimeunit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTimeunit(timeUnitValue newTimeunit)
  {
    if (newTimeunit != timeunit)
    {
      NotificationChain msgs = null;
      if (timeunit != null)
        msgs = ((InternalEObject)timeunit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.TASK__TIMEUNIT, null, msgs);
      if (newTimeunit != null)
        msgs = ((InternalEObject)newTimeunit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.TASK__TIMEUNIT, null, msgs);
      msgs = basicSetTimeunit(newTimeunit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TASK__TIMEUNIT, newTimeunit, newTimeunit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.TASK__SENSOR:
        return basicSetSensor(null, msgs);
      case DslPackage.TASK__IGNORE_BEHAVIOR:
        return basicSetIgnoreBehavior(null, msgs);
      case DslPackage.TASK__TIMEUNIT:
        return basicSetTimeunit(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.TASK__NAME:
        return getName();
      case DslPackage.TASK__SENSOR:
        return getSensor();
      case DslPackage.TASK__ACTION:
        return getAction();
      case DslPackage.TASK__NR_OF_TIMES:
        return getNrOfTimes();
      case DslPackage.TASK__IGNORE_BEHAVIOR:
        return getIgnoreBehavior();
      case DslPackage.TASK__TIME:
        return getTime();
      case DslPackage.TASK__TIMEUNIT:
        return getTimeunit();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.TASK__NAME:
        setName((String)newValue);
        return;
      case DslPackage.TASK__SENSOR:
        setSensor((SensorType)newValue);
        return;
      case DslPackage.TASK__ACTION:
        getAction().clear();
        getAction().addAll((Collection<? extends Actions>)newValue);
        return;
      case DslPackage.TASK__NR_OF_TIMES:
        setNrOfTimes((Integer)newValue);
        return;
      case DslPackage.TASK__IGNORE_BEHAVIOR:
        setIgnoreBehavior((Ignorables)newValue);
        return;
      case DslPackage.TASK__TIME:
        setTime((Integer)newValue);
        return;
      case DslPackage.TASK__TIMEUNIT:
        setTimeunit((timeUnitValue)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.TASK__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DslPackage.TASK__SENSOR:
        setSensor((SensorType)null);
        return;
      case DslPackage.TASK__ACTION:
        getAction().clear();
        return;
      case DslPackage.TASK__NR_OF_TIMES:
        setNrOfTimes(NR_OF_TIMES_EDEFAULT);
        return;
      case DslPackage.TASK__IGNORE_BEHAVIOR:
        setIgnoreBehavior((Ignorables)null);
        return;
      case DslPackage.TASK__TIME:
        setTime(TIME_EDEFAULT);
        return;
      case DslPackage.TASK__TIMEUNIT:
        setTimeunit((timeUnitValue)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.TASK__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DslPackage.TASK__SENSOR:
        return sensor != null;
      case DslPackage.TASK__ACTION:
        return action != null && !action.isEmpty();
      case DslPackage.TASK__NR_OF_TIMES:
        return nrOfTimes != NR_OF_TIMES_EDEFAULT;
      case DslPackage.TASK__IGNORE_BEHAVIOR:
        return ignoreBehavior != null;
      case DslPackage.TASK__TIME:
        return time != TIME_EDEFAULT;
      case DslPackage.TASK__TIMEUNIT:
        return timeunit != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", action: ");
    result.append(action);
    result.append(", nrOfTimes: ");
    result.append(nrOfTimes);
    result.append(", time: ");
    result.append(time);
    result.append(')');
    return result.toString();
  }

} //TaskImpl
