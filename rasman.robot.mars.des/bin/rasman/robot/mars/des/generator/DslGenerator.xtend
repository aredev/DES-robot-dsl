/*
 * generated by Xtext 2.10.0
 */
package rasman.robot.mars.des.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import rasman.robot.mars.des.dsl.ColorSensor
import rasman.robot.mars.des.dsl.Mission
import rasman.robot.mars.des.dsl.Task
import rasman.robot.mars.des.dsl.TouchSensor
import rasman.robot.mars.des.dsl.UltrasonicSensor
import rasman.robot.mars.des.dsl.Ignorables

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DslGenerator extends AbstractGenerator {

override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		val root = resource.allContents.head as Mission;
		
		fsa.generateFile("test.txt", "hallo");	
		
		
		if (root != null){
			val path = "generated/" + resource.getURI().lastSegment + "/"
			val srcPath = path + "/src"
			var defaultBehaviors = newArrayList('OnBackUltraBehavior.java', 'OnDriveBehavior.java', 'OnLightBehavior.java', 'OnDistanceBehavior.java', 'OnGrayTurnBehavior.java')
			
			
			for (Task t : root.tasks){			
				System.out.println(t.sensor);
				
				System.out.println("MaxNr " + t.nrOfTimes);
				System.out.println("Expires after " + t.time + " " + t.timeunit);
				
				if (t.sensor instanceof TouchSensor){
					System.out.println("TouchSensorTask: " + t.name + " AvoidingOtherObjects " + t.ignoreBehavior)
					
					fsa.generateFile(srcPath + "/behaviors/" + t.name + "Behavior.java", TouchBehaviorGenerator.toBehaviorFile(t));	
				}else if(t.sensor instanceof ColorSensor){
					System.out.println("ColorSensor" + (t.sensor as ColorSensor).key + " " + (t.sensor as ColorSensor).keys.size())
					
					fsa.generateFile(srcPath + "/behaviors/" + t.name + "Behavior.java", ColorBehaviorGenerator.toBehaviorFile(t));	
				}else if (t.sensor instanceof UltrasonicSensor){
					System.out.println("UltrasonicSensorBehavior " + (t.sensor as UltrasonicSensor).comparator );
					
					fsa.generateFile(srcPath + "/behaviors/" + t.name  + "Behavior.java", OnFrontUltraBehaviorGenerator.toBehaviorFile(t));
					defaultBehaviors = newArrayList('OnBackUltraBehavior.java', 'OnDriveBehavior.java', 'OnLightBehavior.java', 'OnGrayTurnBehavior.java') //No default OnDistanceBehavior
				}		
						
				
			}
			
			
			val bluetoothFiles = newArrayList('BluetoothConnector.java', 'BluetoothConnectorContainer.java', 'BluetoothSensorDataStreamer.java', 'SlaveSensorData.java');
		
			for(String file : bluetoothFiles){
				fsa.generateFile(srcPath + "/bluetooth/" + file, BluetoothPackageGenerator.createFile(file))
			}
						
			for(String file : defaultBehaviors){
				fsa.generateFile(srcPath + "/behaviors/" + file, DefaultBehaviorGenerator.createFile(file))
			}
			
			val helperFiles = newArrayList('RGBColorWrapper.java', 'IgnoreBehaviors.java', 'IncrementIdOnTimeOutTask.java');
			
			for(String file : helperFiles){
				fsa.generateFile(srcPath + "/helpers/" + file, HelperPackageGenerator.generateHelpers(file))	
			}
			
			fsa.generateFile(srcPath + "/main/Robot.java", RobotClassGenerator.toJava(root.tasks) )
			
			val mainFiles = newArrayList('Direction.java', 'MasterRobot.java', 'RASMAN2.java', 'SlaveRobot.java')
			
			for(String file : mainFiles){
				fsa.generateFile(srcPath + "/main/" + file, MainPackageGenerator.createFile(file))
			}
			
			
		}


	}
}
