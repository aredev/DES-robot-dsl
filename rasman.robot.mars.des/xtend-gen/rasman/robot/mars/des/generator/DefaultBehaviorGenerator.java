package rasman.robot.mars.des.generator;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class DefaultBehaviorGenerator {
  public static String createFile(final String file) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package behaviors;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import lejos.robotics.subsumption.Behavior;");
    _builder.newLine();
    _builder.append("import main.MasterRobot;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class OnBackUltraBehavior implements Behavior{");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* If the ultra sonic back sensor has a value greater than this threshold,");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* we have to drive forward. Otherwise, we will fall of the egde.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("float backUltraSafeThreshold = 0.05f;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* The master robot");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private MasterRobot masterRobot;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Indicates if the behavior got suppressed");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean suppressed = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public OnBackUltraBehavior(MasterRobot r) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.masterRobot = r;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean takeControl() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("float backUltraSample = masterRobot.getBackUltraSensorSample();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return backUltraSample > backUltraSafeThreshold;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void action() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"Back\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// set suppressed to false");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("suppressed = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Drive forward");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("masterRobot.getRightMotor().rotate(180, true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("masterRobot.getLeftMotor().rotate(180, true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while (masterRobot.getLeftMotor().isMoving() && !suppressed){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Wait till turn is complete or suppressed is called");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Thread.yield();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Clean up");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("masterRobot.stopLeftMotor();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("masterRobot.stopRightMotor();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void suppress() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("suppressed = true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String onBackUltra = _builder.toString();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package behaviors;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import lejos.robotics.subsumption.Behavior;");
    _builder_1.newLine();
    _builder_1.append("import main.MasterRobot;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("public class OnDriveBehavior implements Behavior{");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private MasterRobot robot;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private boolean suppressed = false;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* ");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* @param r\t");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public OnDriveBehavior(MasterRobot r){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("this.robot = r;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public boolean takeControl() {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return true;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void action() {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("System.out.println(\"Drive\");");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("// Set suppressed to false");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("suppressed = false;");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("robot.getLeftMotor().setSpeed(150);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("robot.getRightMotor().setSpeed(150);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("// Make both motors go forward");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("robot.getLeftMotor().forward();");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("robot.getRightMotor().forward();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("while(!suppressed){");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("// Wait till turn is complete or suppressed is called");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("Thread.yield();");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("// Clean up");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("robot.stopLeftMotor();");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("robot.stopRightMotor();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void suppress() {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("suppressed = true;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    final String onDrive = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("package behaviors;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("import lejos.robotics.subsumption.Behavior;");
    _builder_2.newLine();
    _builder_2.append("import main.MasterRobot;");
    _builder_2.newLine();
    _builder_2.append("import helpers.IgnoreBehaviors;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("public class OnLightBehavior implements Behavior {");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("/**");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("* The master robot");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("*/");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("private MasterRobot masterRobot;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("/**");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("* Indicates if the robot is suppressed");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("*/");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("private boolean suppressed = false;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("/**");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("* The most recent color measurement");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("*/");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("float whiteBorderValue = 0.545f;");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("/**");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("* Indicates if the left light source triggered the onAction()");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("*/");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("boolean leftIsSource = false;");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("/**");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("* Indicates if the right light source triggered the onAction()");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("*/");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("boolean rightIsSource = false;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("public OnLightBehavior(MasterRobot r) {");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("this.masterRobot = r;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("@Override");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("public boolean takeControl() {");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("float leftLightSensorSample = masterRobot.getLeftLightSensorSample();");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("float rightLightSensorSample = masterRobot.getRightLightSensorSample();");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("if (leftLightSensorSample >= whiteBorderValue){");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("leftIsSource = true;");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("return true;");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("else if (rightLightSensorSample >= whiteBorderValue){");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("rightIsSource = true;");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("return true;");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("else{");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("return false;");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("/**");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("* We send the colorId of the detected color to the slave and add it to our");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("* own list. If we have found all colors we send that we are done and stop");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("* driving.");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("*/");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("@Override");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("public void action() {");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("System.out.println(\"Light\");");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("// Reset suppressed");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("suppressed = false;");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("// Drive backwards");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("masterRobot.getRightMotor().rotate(-180, true);");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("masterRobot.getLeftMotor().rotate(-180, true);");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("// Wait for the motor to stop spinning");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("while (masterRobot.getLeftMotor().isMoving() && !suppressed){");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("// Wait till turn is complete or suppressed is called");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("Thread.yield();");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("// Determine if to rotate left or right");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("if (leftIsSource){");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("// Turn right");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("masterRobot.getRightMotor().rotate(-180, true);");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("masterRobot.getLeftMotor().rotate(180, true);");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("}else{");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("// Turn left");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("masterRobot.getRightMotor().rotate(180, true);");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("masterRobot.getLeftMotor().rotate(-180, true);");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("while (masterRobot.getLeftMotor().isMoving() && !suppressed){");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("// Wait till turn is complete or suppressed is called");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("Thread.yield();");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("// Clean up");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("masterRobot.getLeftMotor().stop();");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("masterRobot.getRightMotor().stop();");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("@Override");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("public void suppress() {");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("suppressed = true;");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.newLine();
    _builder_2.append("}");
    _builder_2.newLine();
    final String onLight = _builder_2.toString();
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("package behaviors;");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("import java.util.Random;");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("import lejos.robotics.subsumption.Behavior;");
    _builder_3.newLine();
    _builder_3.append("import main.MasterRobot;");
    _builder_3.newLine();
    _builder_3.append("import helpers.IgnoreBehaviors;");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("public class OnDistanceBehavior implements Behavior{");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("/**");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.append("* If the ultra sonic back sensor has a value greater than this threshold,");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.append("* we have to drive forward. Otherwise, we will fall of the egde.");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.append("*/");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("float frontUltraSafeThreshold = 0.2f;");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("/**");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.append("* The master robot");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.append("*/");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("private MasterRobot masterRobot;");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("/**");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.append("* Indicates if the behavior got suppressed");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.append("*/");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("private boolean suppressed = false;");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("Random random;");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("public OnDistanceBehavior(MasterRobot r) {");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("this.masterRobot = r;");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("random = new Random();");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("@Override");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("public boolean takeControl() {");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("float frontUltraSample = masterRobot.getFrontUltraSensorSample();");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("return (frontUltraSample > 0 && frontUltraSample <= frontUltraSafeThreshold) && IgnoreBehaviors.withOnDistanceBehavior;");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("@Override");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("public void action() {");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("// set suppressed to false");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("suppressed = false;");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("// Get a random value");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("int rnd = random.nextInt(2);");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("// Rotate based on the random number");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("switch(rnd){");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("case 1:");
    _builder_3.newLine();
    _builder_3.append("      ");
    _builder_3.append("masterRobot.getRightMotor().rotate(-180, true);");
    _builder_3.newLine();
    _builder_3.append("      ");
    _builder_3.append("masterRobot.getLeftMotor().rotate(180, true);");
    _builder_3.newLine();
    _builder_3.append("      ");
    _builder_3.append("break;");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("default:");
    _builder_3.newLine();
    _builder_3.append("      ");
    _builder_3.append("// 0");
    _builder_3.newLine();
    _builder_3.append("      ");
    _builder_3.append("masterRobot.getRightMotor().rotate(180, true);");
    _builder_3.newLine();
    _builder_3.append("      ");
    _builder_3.append("masterRobot.getLeftMotor().rotate(-180, true);");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("        ");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("while (masterRobot.getLeftMotor().isMoving() && !suppressed){");
    _builder_3.newLine();
    _builder_3.append("      ");
    _builder_3.append("// Wait for ");
    _builder_3.newLine();
    _builder_3.append("      ");
    _builder_3.append("Thread.yield();");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("// Clean up");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("masterRobot.stopLeftMotor();");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("masterRobot.stopRightMotor();");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("@Override");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("public void suppress() {");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("suppressed = true;");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("}");
    _builder_3.newLine();
    final String OnDistance = _builder_3.toString();
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("package behaviors;");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("import java.util.LinkedList;");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("import helpers.RGBColorWrapper;");
    _builder_4.newLine();
    _builder_4.append("import lejos.robotics.Color;");
    _builder_4.newLine();
    _builder_4.append("import lejos.robotics.subsumption.Behavior;");
    _builder_4.newLine();
    _builder_4.append("import main.MasterRobot;");
    _builder_4.newLine();
    _builder_4.append("import java.util.Random;");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("/*");
    _builder_4.newLine();
    _builder_4.append(" ");
    _builder_4.append("* In this behavior we we first connect to the slave or wait for the connection from the master (depending on whether we are the master or the slave)");
    _builder_4.newLine();
    _builder_4.append(" ");
    _builder_4.append("* We take control if the measured color is either blue, yellow more red and if we have not encountered this color before. ");
    _builder_4.newLine();
    _builder_4.append(" ");
    _builder_4.append("*/");
    _builder_4.newLine();
    _builder_4.append("public class OnGrayTurnBehavior implements Behavior {");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("/**");
    _builder_4.newLine();
    _builder_4.append("   ");
    _builder_4.append("* The master robot");
    _builder_4.newLine();
    _builder_4.append("   ");
    _builder_4.append("*/");
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("private MasterRobot masterRobot;");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("/**");
    _builder_4.newLine();
    _builder_4.append("   ");
    _builder_4.append("* Indicates if the robot is suppressed");
    _builder_4.newLine();
    _builder_4.append("   ");
    _builder_4.append("*/");
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("private boolean suppressed = false;");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("/**");
    _builder_4.newLine();
    _builder_4.append("   ");
    _builder_4.append("* The most recent color measurement");
    _builder_4.newLine();
    _builder_4.append("   ");
    _builder_4.append("*/");
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("float[] mostRecentMeasurement = new float[3];");
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("/**");
    _builder_4.newLine();
    _builder_4.append("   ");
    _builder_4.append("* The most recent color ID based on the most recent measurement");
    _builder_4.newLine();
    _builder_4.append("   ");
    _builder_4.append("*/");
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("int mostRecentColorID = -1;");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("/**");
    _builder_4.newLine();
    _builder_4.append("   ");
    _builder_4.append("* Colors found so far");
    _builder_4.newLine();
    _builder_4.append("   ");
    _builder_4.append("*/");
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("LinkedList<Integer> foundColors = new LinkedList<Integer>();");
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("private Random random;");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("public OnGrayTurnBehavior(MasterRobot r) {");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("this.masterRobot = r;");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("this.random = new Random();");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("@Override");
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("public boolean takeControl() {");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("mostRecentMeasurement = masterRobot.getColorSensorSample();");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("mostRecentColorID = RGBColorWrapper.determineColor(mostRecentMeasurement);");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("return mostRecentColorID == Color.GRAY;");
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("/**");
    _builder_4.newLine();
    _builder_4.append("   ");
    _builder_4.append("* We send the colorId of the detected color to the slave and add it to our");
    _builder_4.newLine();
    _builder_4.append("   ");
    _builder_4.append("* own list. If we have found all colors we send that we are done and stop");
    _builder_4.newLine();
    _builder_4.append("   ");
    _builder_4.append("* driving.");
    _builder_4.newLine();
    _builder_4.append("   ");
    _builder_4.append("*/");
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("@Override");
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("public void action() {");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("// Reset suppressed");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("suppressed = false;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("if(random.nextBoolean()){");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("masterRobot.getLeftMotor().rotate(-180, true);");
    _builder_4.newLine();
    _builder_4.append("\t    ");
    _builder_4.append("masterRobot.getRightMotor().rotate(180, true);");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}else{");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("masterRobot.getLeftMotor().rotate(180, true);");
    _builder_4.newLine();
    _builder_4.append("\t    ");
    _builder_4.append("masterRobot.getRightMotor().rotate(-180, true);");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("while(masterRobot.getLeftMotor().isMoving() && !suppressed){");
    _builder_4.newLine();
    _builder_4.append("      ");
    _builder_4.append("Thread.yield();");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("// Clean up");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("masterRobot.stopLeftMotor();");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("masterRobot.stopRightMotor();");
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("@Override");
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("public void suppress() {");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("suppressed = true;");
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.newLine();
    _builder_4.append("}");
    _builder_4.newLine();
    final String OnGrayTurn = _builder_4.toString();
    switch (file) {
      case "OnBackUltraBehavior.java":
        return onBackUltra;
      case "OnDriveBehavior.java":
        return onDrive;
      case "OnLightBehavior.java":
        return onLight;
      case "OnDistanceBehavior.java":
        return OnDistance;
      case "OnGrayTurnBehavior.java":
        return OnGrayTurn;
    }
    return null;
  }
}
