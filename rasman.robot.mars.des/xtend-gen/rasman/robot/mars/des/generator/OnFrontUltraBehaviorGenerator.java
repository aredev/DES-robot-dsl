package rasman.robot.mars.des.generator;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import rasman.robot.mars.des.dsl.Actions;
import rasman.robot.mars.des.dsl.CompareOperator;
import rasman.robot.mars.des.dsl.Ignorables;
import rasman.robot.mars.des.dsl.SensorType;
import rasman.robot.mars.des.dsl.Task;
import rasman.robot.mars.des.dsl.UltrasonicSensor;
import rasman.robot.mars.des.dsl.timeUnitValue;
import rasman.robot.mars.des.generator.ActionGenerator;
import rasman.robot.mars.des.generator.TimeOutGenerator;

@SuppressWarnings("all")
public class OnFrontUltraBehaviorGenerator {
  public static CharSequence toBehaviorFile(final Task t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package behaviors;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import lejos.robotics.subsumption.Behavior;");
    _builder.newLine();
    _builder.append("import main.MasterRobot;");
    _builder.newLine();
    _builder.append("import helpers.*;");
    _builder.newLine();
    _builder.append("import lejos.hardware.Sound;");
    _builder.newLine();
    _builder.append("import java.util.Timer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class OnFrontUltraBehavior implements Behavior{");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* If the ultra sonic back sensor has a value greater than this threshold,");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* we have to drive forward. Otherwise, we will fall of the egde.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("float frontUltraSafeThreshold = 0.3f;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* The master robot");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private MasterRobot masterRobot;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Indicates if the behavior got suppressed");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean suppressed = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*\tIndicates number of times the action has been performed.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int actionCounter = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*\tMax number of times an action is allowed to run.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int maxNrTime = ");
    int _nrOfTimes = t.getNrOfTimes();
    _builder.append(_nrOfTimes, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*\tBoolean to indicate whether times should be set");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    {
      timeUnitValue _timeunit = t.getTimeunit();
      boolean _equals = Objects.equal(_timeunit, null);
      if (_equals) {
        _builder.append("\t");
        _builder.append("private boolean setTimer = false;");
        _builder.newLine();
      } else {
        _builder.append("\t");
        _builder.append("private boolean setTimer = true;");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int id;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public OnFrontUltraBehavior(MasterRobot r, int id) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.masterRobot = r;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.id = id;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean takeControl() {\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (IgnoreBehaviors.currentTaskId != id){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (setTimer){");
    _builder.newLine();
    _builder.append("\t\t\t");
    String _java = TimeOutGenerator.toJava(t);
    _builder.append(_java, "\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("setTimer = false;\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("float frontUltraSample = masterRobot.getFrontUltraSensorSample();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (actionCounter >= maxNrTime){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("IgnoreBehaviors.withOnDistanceBehavior = true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("IgnoreBehaviors.currentTaskId++;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Sound.twoBeeps();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      Ignorables _ignoreBehavior = t.getIgnoreBehavior();
      boolean _notEquals = (!Objects.equal(_ignoreBehavior, null));
      if (_notEquals) {
        _builder.append("\t\t");
        _builder.append("IgnoreBehaviors.withOnDistanceBehavior = false;");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return frontUltraSample ");
    SensorType _sensor = t.getSensor();
    CompareOperator _comparator = ((UltrasonicSensor) _sensor).getComparator();
    _builder.append(_comparator, "\t\t");
    _builder.append("  ");
    SensorType _sensor_1 = t.getSensor();
    String _distance = ((UltrasonicSensor) _sensor_1).getDistance();
    _builder.append(_distance, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void action() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// set suppressed to false");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("suppressed = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Actions> _action = t.getAction();
      for(final Actions act : _action) {
        _builder.append("\t\t");
        String _generateCodeFromAction = ActionGenerator.generateCodeFromAction(act);
        _builder.append(_generateCodeFromAction, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    EList<Actions> _action_1 = t.getAction();
    String _yieldingThread = ActionGenerator.yieldingThread(_action_1);
    _builder.append(_yieldingThread, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actionCounter++;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void suppress() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("suppressed = true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
