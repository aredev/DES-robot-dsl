package rasman.robot.mars.des.generator;

import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Conversions;
import rasman.robot.mars.des.dsl.Task;

@SuppressWarnings("all")
public class RobotClassGenerator {
  public static String toJava(final List<Task> tasks) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package main;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("import behaviors.*;");
    _builder.newLine();
    _builder.append("import bluetooth.BluetoothConnector;");
    _builder.newLine();
    _builder.append("import bluetooth.BluetoothConnectorContainer;");
    _builder.newLine();
    _builder.append("import bluetooth.SlaveSensorData;");
    _builder.newLine();
    _builder.append("import bluetooth.BluetoothSensorDataStreamer;");
    _builder.newLine();
    _builder.append("import lejos.hardware.BrickFinder;");
    _builder.newLine();
    _builder.append("import lejos.robotics.subsumption.Arbitrator;");
    _builder.newLine();
    _builder.append("import lejos.robotics.subsumption.Behavior;");
    _builder.newLine();
    _builder.append("import lejos.hardware.Sound;");
    _builder.newLine();
    _builder.append("import helpers.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author Abdullah Rasool, Tom Sandmann");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Robot {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Indicates whether this is the master robot");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean isMasterRobot;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* The name of the master robot");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String masterRobotName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* The master robot");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private MasterRobot masterRobot = null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* The slave robot");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private SlaveRobot slaveRobot = null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Constructor");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Robot(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("determineRobot();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Init ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void init(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(isMasterRobot)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("startMasterRobot();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("startSlaveRobot();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Run();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void startMasterRobot(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("masterRobot = new MasterRobot();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void startSlaveRobot(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("slaveRobot = new SlaveRobot();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Determine which robot you are and who will setup the bluetooth connector");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void determineRobot(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Set the name of the master robot");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("isMasterRobot = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Check whether this is a master robot");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(BrickFinder.getLocal().getName().equals(\"Rover5\")){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("isMasterRobot = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if(BrickFinder.getLocal().getName().equals(\"Rover7\")){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("isMasterRobot = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//The slave needs to know his name, so he can connect to the master");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//The slave starts the connection, because he immediately starts to stream sensor data to the master");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("masterRobotName = BrickFinder.getLocal().getName();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Run method of the robot");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void Run(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BluetoothConnectorContainer container = new BluetoothConnectorContainer(isMasterRobot, masterRobotName);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (isMasterRobot){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// This is the master robot");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.print(\"I\'m the master\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int idCounter = 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("container.getInstance().checkForMessage();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Start the thread for receiving the sensor values");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Define the list of behaviors");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Behavior[] behaviors = { ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("new OnDriveBehavior(masterRobot),");
    _builder.newLine();
    {
      for(final Task task : tasks) {
        _builder.append("\t\t\t\t\t\t");
        _builder.append("new ");
        String _name = task.getName();
        _builder.append(_name, "\t\t\t\t\t\t");
        _builder.append("Behavior(masterRobot, idCounter++),");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t\t\t");
    _builder.append("new OnDistanceBehavior(masterRobot),");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("new OnGrayTurnBehavior(masterRobot),");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("new OnBackUltraBehavior(masterRobot),");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("new OnLightBehavior(masterRobot) ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Create and start the arbitrator");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Arbitrator arbitrator = new Arbitrator(behaviors);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("IgnoreBehaviors.totalNrOfTasks = behaviors.length;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("new Thread(new Runnable(){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("while(true){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (");
    int _length = ((Object[])Conversions.unwrapArray(tasks, Object.class)).length;
    _builder.append(_length, "\t\t\t\t\t\t");
    _builder.append(" == IgnoreBehaviors.currentTaskId){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("Sound.twoBeeps();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("Sound.twoBeeps();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("System.exit(1);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}).start();\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("arbitrator.go();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// This is the slave robot");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.print(\"I\'m the slave\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Only define one behavior that will stream the sensor values");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Behavior[] behaviors = {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("new BluetoothSensorDataStreamer(slaveRobot, container.getInstance())");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Arbitrator arbitrator = new Arbitrator(behaviors);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("arbitrator.go();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    return _builder.toString();
  }
}
