package rasman.robot.mars.des.generator;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import rasman.robot.mars.des.dsl.Actions;
import rasman.robot.mars.des.dsl.Ignorables;
import rasman.robot.mars.des.dsl.SensorType;
import rasman.robot.mars.des.dsl.Task;
import rasman.robot.mars.des.dsl.TouchSensor;
import rasman.robot.mars.des.dsl.TouchSensorSides;
import rasman.robot.mars.des.dsl.timeUnitValue;
import rasman.robot.mars.des.generator.ActionGenerator;
import rasman.robot.mars.des.generator.TimeOutGenerator;

@SuppressWarnings("all")
public class TouchBehaviorGenerator {
  public static CharSequence toBehaviorFile(final Task touchTask) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("package behaviors;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import lejos.robotics.subsumption.Behavior;");
    _builder.newLine();
    _builder.append("import main.MasterRobot;");
    _builder.newLine();
    _builder.append("import main.SlaveRobot;");
    _builder.newLine();
    _builder.append("import bluetooth.SlaveSensorData;");
    _builder.newLine();
    _builder.append("import lejos.hardware.Sound;");
    _builder.newLine();
    _builder.append("import helpers.*;");
    _builder.newLine();
    _builder.append("import lejos.robotics.Color;");
    _builder.newLine();
    _builder.append("import java.util.Timer;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = touchTask.getName();
    _builder.append(_name, "");
    _builder.append("Behavior implements Behavior{");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private MasterRobot robot;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean suppressed = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean collisionLeft = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean collisionRight = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean collisionBoth = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int id;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*\tBoolean to indicate whether times should be set");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    {
      timeUnitValue _timeunit = touchTask.getTimeunit();
      boolean _equals = Objects.equal(_timeunit, null);
      if (_equals) {
        _builder.append("\t");
        _builder.append("private boolean setTimer = false;");
        _builder.newLine();
      } else {
        _builder.append("\t");
        _builder.append("private boolean setTimer = true;");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*\tIndicates number of times the action has been performed.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int actionCounter = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*\tMax number of times an action is allowed to run.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int maxNrTime = ");
    int _nrOfTimes = touchTask.getNrOfTimes();
    _builder.append(_nrOfTimes, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name_1 = touchTask.getName();
    _builder.append(_name_1, "\t");
    _builder.append("Behavior (MasterRobot r, int id) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.robot = r;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.id = id;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean takeControl() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (IgnoreBehaviors.currentTaskId != id){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (setTimer){");
    _builder.newLine();
    _builder.append("\t\t\t");
    String _java = TimeOutGenerator.toJava(touchTask);
    _builder.append(_java, "\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("setTimer = false;\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (actionCounter >= maxNrTime){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("IgnoreBehaviors.withOnDistanceBehavior = true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("IgnoreBehaviors.currentTaskId++;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Sound.twoBeeps();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      Ignorables _ignoreBehavior = touchTask.getIgnoreBehavior();
      boolean _notEquals = (!Objects.equal(_ignoreBehavior, null));
      if (_notEquals) {
        _builder.append("\t\t");
        _builder.append("IgnoreBehaviors.withOnDistanceBehavior = false;");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    SensorType _sensor = touchTask.getSensor();
    String _createTakeControl = TouchBehaviorGenerator.createTakeControl(((TouchSensor) _sensor));
    _builder.append(_createTakeControl, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void action() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Set suppressed to false");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("suppressed = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Actions> _action = touchTask.getAction();
      for(final Actions act : _action) {
        _builder.append("\t\t");
        String _generateCodeFromAction = ActionGenerator.generateCodeFromAction(act);
        _builder.append(_generateCodeFromAction, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    EList<Actions> _action_1 = touchTask.getAction();
    String _yieldingThread = ActionGenerator.yieldingThread(_action_1);
    _builder.append(_yieldingThread, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actionCounter++;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void suppress() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("suppressed = true; ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public static String createTakeControl(final TouchSensor sensor) {
    TouchSensorSides _key = sensor.getKey();
    if (_key != null) {
      switch (_key) {
        case LEFT:
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("if(SlaveSensorData.touchLeft == 1.0){");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("collisionLeft = true;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("return true;");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
          _builder.append("return false;");
          _builder.newLine();
          return _builder.toString();
        case RIGHT:
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("if(SlaveSensorData.touchRight == 1.0){");
          _builder_1.newLine();
          _builder_1.append("\t");
          _builder_1.append("collisionRight = true;");
          _builder_1.newLine();
          _builder_1.append("\t");
          _builder_1.append("return true;");
          _builder_1.newLine();
          _builder_1.append("}");
          _builder_1.newLine();
          _builder_1.append("return false;");
          _builder_1.newLine();
          return _builder_1.toString();
        case ANY:
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("if(SlaveSensorData.touchLeft == 1.0){");
          _builder_2.newLine();
          _builder_2.append("\t");
          _builder_2.append("collisionLeft = true;");
          _builder_2.newLine();
          _builder_2.append("\t");
          _builder_2.append("return true;");
          _builder_2.newLine();
          _builder_2.append("}else if(SlaveSensorData.touchRight == 1.0){");
          _builder_2.newLine();
          _builder_2.append("\t");
          _builder_2.append("collisionRight = true;");
          _builder_2.newLine();
          _builder_2.append("\t");
          _builder_2.append("return true;");
          _builder_2.newLine();
          _builder_2.append("}");
          _builder_2.newLine();
          _builder_2.append("return false;");
          _builder_2.newLine();
          return _builder_2.toString();
        case BOTH:
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("if(SlaveSensorData.touchLeft == 1.0 && SlaveSensorData.touchRight == 1.0){");
          _builder_3.newLine();
          _builder_3.append("\t");
          _builder_3.append("collisionBoth = true;");
          _builder_3.newLine();
          _builder_3.append("\t");
          _builder_3.append("return true;");
          _builder_3.newLine();
          _builder_3.append("}");
          _builder_3.newLine();
          _builder_3.append("return false;");
          _builder_3.newLine();
          return _builder_3.toString();
        default:
          break;
      }
    }
    return null;
  }
}
