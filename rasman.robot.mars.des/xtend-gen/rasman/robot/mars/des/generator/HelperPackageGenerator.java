package rasman.robot.mars.des.generator;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class HelperPackageGenerator {
  public static String generateHelpers(final String file) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package helpers;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import lejos.robotics.Color;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public final class RGBColorWrapper {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// All of the measurements done using Rover7");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Red RGB color measurements. Color ID: 0");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static float[] red = { 0.19f, 0.048f, 0.030f };");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Green RGB color measurements. Color ID: 1");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static float[] green = { 0.10f, 0.19f, 0.08f };");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Blue RGB color measurements. Color ID: 2");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static float[] blue = { 0.05f, 0.165f, 0.138f };");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* White RGB color measurements. Color ID 6");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static float[] white = { 0.26f, 0.29f, 0.19f };");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Black RGB color measurements. Color ID 7");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static float[] black = { 0.023f, 0.028f, 0.016f };");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*\tGray RGB color measurements. Color ID 9");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static float[] gray = {  0.009f, 0.009f, 0.009f};");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Deviation for the color measurements");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static float measurementDeviation = 0.03f;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Determine the color from the RGB color measurements");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param colorMeasurement float[] containing 3 RGB color values.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return\tInteger indicating the color (according to lejos.robotics.color)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static int determineColor(float[] colorMeasurement){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (equalMeasurements(red, colorMeasurement, measurementDeviation)){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Color.RED; // Color ID: 0");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if (equalMeasurements(green, colorMeasurement, measurementDeviation)){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Color.GREEN; // Color ID: 1");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if (equalMeasurements(blue, colorMeasurement, measurementDeviation)){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Color.BLUE; // Color ID: 2");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if (equalMeasurements(white, colorMeasurement, measurementDeviation)){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Color.WHITE; // Color ID 6");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if (equalMeasurements(black, colorMeasurement, 0.009f)){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Color.BLACK; // Color ID 7");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}else if (equalMeasurements(gray, colorMeasurement, 0.005f)){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Color.GRAY; // Color ID 9");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Color.NONE;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Check if two RGB measurements are \"equal\" given a measurement deviation.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param measurement1\tThe first RGB measurement");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param measurement2\tThe second RGB measurement");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param measurementDeviation the measurement deviation");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return <code>True</code> if the absolute difference for the pairwise values of the RGB measurements are smaller ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* than the specified measurement deviation.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static boolean equalMeasurements(float[] measurement1, float[] measurement2, float measurementDeviation){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < 3; i++){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (Math.abs(measurement1[i] - measurement2[i]) > measurementDeviation){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String RGB = _builder.toString();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package helpers;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("public class IgnoreBehaviors {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public static boolean withOnDistanceBehavior = true;\t\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public static int currentTaskId = 0;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public static int totalNrOfTasks = 999;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    final String IgnoreBehaviors = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("package helpers;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("import java.util.TimerTask;");
    _builder_2.newLine();
    _builder_2.append("import lejos.hardware.Sound;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("public class IncrementIdOnTimeOutTask extends TimerTask {");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("@Override");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("public void run() {");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("System.out.println(\"Time is up\");");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("if (IgnoreBehaviors.currentTaskId+1 <= IgnoreBehaviors.totalNrOfTasks){");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("//If there is still that needs to run, let it run");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("IgnoreBehaviors.currentTaskId++;");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("Sound.twoBeeps();");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("}else{");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("//Kill the application");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("System.exit(0);");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("}");
    _builder_2.newLine();
    final String IncrementidTimerTask = _builder_2.toString();
    switch (file) {
      case "RGBColorWrapper.java":
        return RGB;
      case "IgnoreBehaviors.java":
        return IgnoreBehaviors;
      case "IncrementIdOnTimeOutTask.java":
        return IncrementidTimerTask;
    }
    return null;
  }
}
