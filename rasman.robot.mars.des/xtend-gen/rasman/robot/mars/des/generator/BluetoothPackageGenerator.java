package rasman.robot.mars.des.generator;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class BluetoothPackageGenerator {
  public static String createFile(final String fileName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package bluetooth;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.DataInputStream;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.io.PrintWriter;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// @see http://stackoverflow.com/questions/8997598/importing-json-into-an-eclipse-project");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import lejos.remote.nxt.BTConnector;");
    _builder.newLine();
    _builder.append("import lejos.remote.nxt.NXTConnection;");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* In this class we handle the bluetooth connection");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class BluetoothConnector {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Hashmap containing the paired robots");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final HashMap<String, String> pairedRobots = new HashMap<String, String>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* The print writer, for writing messages using bluetooth");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private PrintWriter writer = null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* The timeout value for bluetooth");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final int TIMEOUT = 60000;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* The bluetooth connection");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final NXTConnection connection;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* The bluetooth message that was received");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String message;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Indicates whether there is a message received that can be read");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean messageReady;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Master constructor");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* connect to a specific robot");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param masterRobotName The name of the master robot.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public BluetoothConnector(String masterRobotName){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("initializePairedRobots();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Create the bluetooth connector");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BTConnector connector = new BTConnector();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Get the corresponding slave robot");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String correspondingSlave = pairedRobots.get(masterRobotName);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"Trying to connect to \" + correspondingSlave);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("connection = connector.connect(correspondingSlave, NXTConnection.RAW);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(connection == null){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"Could not connect to \" + correspondingSlave);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"Connection success\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writer = new PrintWriter(connection.openDataOutputStream());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public BluetoothConnector getBluetoothConnector(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Slave constructor ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Wait for connection from master");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public BluetoothConnector(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BTConnector connector = new BTConnector();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("connection = connector.waitForConnection(TIMEOUT, NXTConnection.RAW);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("writer = new PrintWriter(connection.openOutputStream());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Send a batch of sensor values through bluetooth.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* We could make use of JSON structure, but this is not nessacacy. ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Also see http://stackoverflow.com/questions/13340138/how-to-generate-json-string-in-java-using-net-sf-json");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* if we somehow decided to do so.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param touchLeft\t\tThe value of the touch left sensor");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param touchRight\tThe value of the touch right sensor");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param frontUltra\tThe value of the front ultrasonic sensor");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param gyro\t\t\tThe value of the gyro");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void writeMessage(int touchLeft, int touchRight, float frontUltra, float gyro){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Sending a batch of sensor values to the master. \t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StringBuilder batch = new StringBuilder();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Add all of the data to the current batch");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("batch");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(".append(touchLeft).append(\" \")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(".append(touchRight).append(\" \")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(".append(frontUltra).append(\" \")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(".append(gyro);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(batch.toString());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("writer.println(batch.toString());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Flush it.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("writer.flush();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Thread checks whether a message is received from the other robot.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* If that is the case, we set a flag in the ReadMessageBehavior");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void checkForMessage(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//BufferedReader reader = new BufferedReader(new InputStreamReader(connection.openInputStream()));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DataInputStream reader = connection.openDataInputStream();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new Thread(new Runnable(){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("while(true){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("try{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("message = reader.readLine();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("messageReady = (message.length() > 0);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (messageReady){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("updateValues();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}catch (IOException ex){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("System.out.println(\"EXCP\\n\" + ex.getMessage());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("messageReady = false;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}).start();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Update sensor values");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void updateValues(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String [] sensorValues = message.split(\"\\\\s+\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SlaveSensorData.touchLeft = Integer.parseInt(sensorValues[0]);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SlaveSensorData.touchRight = Integer.parseInt(sensorValues[1]);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SlaveSensorData.frontUltra = Float.parseFloat(sensorValues[2]);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SlaveSensorData.gyro = Float.parseFloat(sensorValues[3]);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return received message");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getMessage(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("messageReady = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return message;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return <code>True</code> if there is a message available, <code>False</code> otherwise");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean messageAvailable(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return messageReady;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Initialize the pairs of robots that have been coupled");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void initializePairedRobots(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pairedRobots.put(\"Rover5\", \"Rover6\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pairedRobots.put(\"Rover6\", \"Rover5\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pairedRobots.put(\"Rover7\", \"Rover8\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pairedRobots.put(\"Rover8\", \"Rover7\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String bluetoothConnectorContent = _builder.toString();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package bluetooth;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* Container for the bluetooth connector");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* In order to prevent NullPointer");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("public class BluetoothConnectorContainer {");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private BluetoothConnector controller;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private boolean isMaster;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* Constructor");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* @param master\t\tIndicates if the robot is the master");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* @param masterName\tThe name of the master");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public BluetoothConnectorContainer(boolean master, String masterName){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("this.isMaster = master;");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("if(! isMaster){");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("//The slave inits the bluetooth connection");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("controller = new BluetoothConnector(masterName);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("}else{");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("controller = new BluetoothConnector();");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* Get the BluetoothConnector instance");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* @return BluetoothConnector instance");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public BluetoothConnector getInstance(){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return controller;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    final String BluetoothConnectorContainer = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("package bluetooth;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("import lejos.robotics.subsumption.Behavior;");
    _builder_2.newLine();
    _builder_2.append("import main.Direction;");
    _builder_2.newLine();
    _builder_2.append("import main.SlaveRobot;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("public class BluetoothSensorDataStreamer implements Behavior {");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("/*");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("* The bluetooth connector");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("*/");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("BluetoothConnector connector;");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("/*");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("* The slave robot");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("*/");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("private final SlaveRobot slaveRobot;");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("/*");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("* Indicates whether the behavior got suppressed");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("*/");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("boolean suppressed;");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("/**");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("* Constructor");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("* @param slaveRobot\tThe slave robot.");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("*/");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("public BluetoothSensorDataStreamer(SlaveRobot slaveRobot, BluetoothConnector connector){");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("this.slaveRobot = slaveRobot;");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("this.connector = connector;");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("suppressed = false;");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("/**");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("* Take control method, always return true as this is the only behavior of the slave.");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("*/");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("@Override");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("public boolean takeControl() {");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("return true;");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("/**");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("* The action method, which specified what the slave will do");
    _builder_2.newLine();
    _builder_2.append("\t ");
    _builder_2.append("*/");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("@Override");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("public void action() {");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("while (!suppressed){");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("/*");
    _builder_2.newLine();
    _builder_2.append("\t\t\t ");
    _builder_2.append("* Time to wait before retransmitting the data");
    _builder_2.newLine();
    _builder_2.append("\t\t\t ");
    _builder_2.append("*/");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("long refreshRate = 100;");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("/**");
    _builder_2.newLine();
    _builder_2.append("\t\t\t ");
    _builder_2.append("* Retrieve all of the sensor values and submit them");
    _builder_2.newLine();
    _builder_2.append("\t\t\t ");
    _builder_2.append("*/");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("int touchLeft = slaveRobot.getTouchValue(Direction.LEFT);");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("int touchRight = slaveRobot.getTouchValue(Direction.RIGHT);");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("float frontUltra = slaveRobot.getFrontUltraValue();");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("int gyro = slaveRobot.getGyroValue();");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("try{");
    _builder_2.newLine();
    _builder_2.append("\t\t\t\t");
    _builder_2.append("connector.writeMessage(touchLeft, touchRight, frontUltra, gyro);");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("}catch(Exception e){");
    _builder_2.newLine();
    _builder_2.append("\t\t\t\t");
    _builder_2.append("System.exit(0);");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("/**");
    _builder_2.newLine();
    _builder_2.append("\t\t\t ");
    _builder_2.append("* Sleep some time before resending the values.");
    _builder_2.newLine();
    _builder_2.append("\t\t\t ");
    _builder_2.append("*/");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("try {");
    _builder_2.newLine();
    _builder_2.append("\t\t\t\t");
    _builder_2.append("Thread.sleep(refreshRate);");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("} catch (InterruptedException e) {");
    _builder_2.newLine();
    _builder_2.append("\t\t\t\t");
    _builder_2.append("e.printStackTrace();");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("@Override");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("public void suppress() {");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("suppressed = true;");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.newLine();
    _builder_2.append("}");
    _builder_2.newLine();
    final String BluetoothSensorDataStreamer = _builder_2.toString();
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("package bluetooth;");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("public class SlaveSensorData {");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("// Static variables that can be read to access the latest sensor values available");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("public static int touchLeft = -1;");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("public static int touchRight = -1;");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("public static float frontUltra = -1;");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("public static float gyro = -1; ");
    _builder_3.newLine();
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.newLine();
    final String SlaveSensorData = _builder_3.toString();
    switch (fileName) {
      case "BluetoothConnector.java":
        return bluetoothConnectorContent;
      case "BluetoothConnectorContainer.java":
        return BluetoothConnectorContainer;
      case "BluetoothSensorDataStreamer.java":
        return BluetoothSensorDataStreamer;
      case "SlaveSensorData.java":
        return SlaveSensorData;
    }
    return null;
  }
}
