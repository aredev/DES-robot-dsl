package rasman.robot.mars.des.generator;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class MainPackageGenerator {
  public static String createFile(final String file) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package main;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public enum Direction {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("LEFT, RIGHT");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String direction = _builder.toString();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package main;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("import lejos.hardware.ev3.LocalEV3;");
    _builder_1.newLine();
    _builder_1.append("import lejos.hardware.motor.EV3LargeRegulatedMotor;");
    _builder_1.newLine();
    _builder_1.append("import lejos.hardware.port.MotorPort;");
    _builder_1.newLine();
    _builder_1.append("import lejos.hardware.sensor.EV3ColorSensor;");
    _builder_1.newLine();
    _builder_1.append("import lejos.hardware.sensor.EV3UltrasonicSensor;");
    _builder_1.newLine();
    _builder_1.append("import lejos.hardware.sensor.NXTLightSensor;");
    _builder_1.newLine();
    _builder_1.append("import lejos.robotics.SampleProvider;");
    _builder_1.newLine();
    _builder_1.append("import bluetooth.SlaveSensorData;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("public class MasterRobot extends Robot{");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private final EV3LargeRegulatedMotor leftMotor, rightMotor, armMotor;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private final NXTLightSensor leftLightSensor, rightLightSensor;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private final EV3UltrasonicSensor backUltraSensor;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private final EV3ColorSensor colorSensor;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private final SampleProvider leftLight, rightLight, backDistance, color;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public MasterRobot() {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("leftMotor = new EV3LargeRegulatedMotor(MotorPort.A);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("rightMotor = new EV3LargeRegulatedMotor(MotorPort.B);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("armMotor = new EV3LargeRegulatedMotor(MotorPort.C);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("leftLightSensor = new NXTLightSensor(LocalEV3.get().getPort(\"S1\"));");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("rightLightSensor = new NXTLightSensor(LocalEV3.get().getPort(\"S2\"));");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("backUltraSensor = new EV3UltrasonicSensor(LocalEV3.get().getPort(\"S3\"));");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("colorSensor = new EV3ColorSensor(LocalEV3.get().getPort(\"S4\"));");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("//Sample Providers");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("leftLight = leftLightSensor.getRedMode();");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("rightLight = rightLightSensor.getRedMode();");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("color = colorSensor.getRGBMode();");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("backDistance = backUltraSensor.getDistanceMode();");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void rotateLeftMotorBackward(){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("this.leftMotor.backward();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void rotateLeftMotorForward(){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("this.leftMotor.forward();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void rotateRightMotorBackward(){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("this.rightMotor.backward();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public EV3LargeRegulatedMotor getArmMotor(){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return this.armMotor;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void putArmMotorDown(){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("armMotor.rotate(-120);");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t  ");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void putArmMotorUp(){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("armMotor.rotate(120);");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public float getFrontUltraSensorSample(){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return SlaveSensorData.frontUltra;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void rotateRightMotorForward(){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("this.rightMotor.forward();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void stopRightMotor(){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("this.rightMotor.stop(true);");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void stopLeftMotor(){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("this.leftMotor.stop(true);");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public EV3LargeRegulatedMotor getLeftMotor(){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return this.leftMotor;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public EV3LargeRegulatedMotor getRightMotor(){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return this.rightMotor;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* Returns the color ID of the surface.");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* The sensor can identify 8 unique colors (NONE, BLACK, BLUE, GREEN, YELLOW, RED, WHITE, BROWN)");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* with ID of 0-7 respectively.");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* @return The color ID of the surface.");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public float[] getColorSensorSample(){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append("\t\t ");
    _builder_1.append("* colorsensor.sampleSize() has the value 1");
    _builder_1.newLine();
    _builder_1.append("\t\t ");
    _builder_1.append("* If you want to use RGB measurements, you should change it to 3.");
    _builder_1.newLine();
    _builder_1.append("\t\t ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("float [] sampleSize = new float [3];");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("color.fetchSample(sampleSize, 0);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return sampleSize;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* Get the sample of the left light sensor");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* @return");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public float getLeftLightSensorSample(){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("float [] sampleSize = new float [1];");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("leftLight.fetchSample(sampleSize, 0);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return sampleSize[0];");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* Get the sample of the right light sensor");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* @return");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public float getRightLightSensorSample(){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("float [] sampleSize = new float [1];");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("rightLight.fetchSample(sampleSize, 0);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return sampleSize[0];");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* Get the value of the ultrasonic sensor on the back.");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* Note that this sensor points down, so it can be used to prevent from falling off");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* the platform when driving backwards.");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("* @return float value of the current sample of the ultrasonic sensor.");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public float getBackUltraSensorSample(){");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("float[] sampleSize = new float[backUltraSensor.sampleSize()];");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("backDistance.fetchSample(sampleSize, 0);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return sampleSize[0];");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}\t");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    final String MasterRobot = _builder_1.toString();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("package main;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("public class RASMAN2 {");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("public static void main(String[] args) {");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("Robot robot = new Robot();");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("robot.init();");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("}");
    _builder_2.newLine();
    final String RASMAN2 = _builder_2.toString();
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("package main;");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("import lejos.hardware.ev3.LocalEV3;");
    _builder_3.newLine();
    _builder_3.append("import lejos.hardware.sensor.EV3GyroSensor;");
    _builder_3.newLine();
    _builder_3.append("import lejos.hardware.sensor.EV3TouchSensor;");
    _builder_3.newLine();
    _builder_3.append("import lejos.hardware.sensor.EV3UltrasonicSensor;");
    _builder_3.newLine();
    _builder_3.append("import lejos.robotics.SampleProvider;");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("public class SlaveRobot extends Robot {");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("/**");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("* The left touch sensor");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("*/");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("private EV3TouchSensor touchLeftSensor;");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("/**");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("* The right touch sensor");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("*/");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("private EV3TouchSensor touchRightSensor;");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("/**");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("* The front ultra sensor");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("*/");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("private EV3UltrasonicSensor frontUltraSensor;");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("/**");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("* The gyro sensor");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("*/");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("private EV3GyroSensor gyroSensor;");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("/**");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("* The sample providers for the sensors");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("*/");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("private SampleProvider touchLeft, touchRight, ultraBack, gyro;");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("public SlaveRobot() {");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("touchLeftSensor = new EV3TouchSensor(LocalEV3.get().getPort(\"S1\"));");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("touchRightSensor = new EV3TouchSensor(LocalEV3.get().getPort(\"S2\"));");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("frontUltraSensor = new EV3UltrasonicSensor(LocalEV3.get().getPort(\"S3\"));");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("gyroSensor = new EV3GyroSensor(LocalEV3.get().getPort(\"S4\"));");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("//Sample providers");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("touchLeft = touchLeftSensor.getTouchMode();");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("touchRight = touchRightSensor.getTouchMode();");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("ultraBack = frontUltraSensor.getDistanceMode();");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("gyro = gyroSensor.getAngleMode();");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("/**");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("* Get the touch value of the touch sensor for a given direction");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("* @param dir\tSpecifies from which touch sensor you need obtain the sample");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("* @return\t\tThe touch sample of the touch sensor for the specified dir.");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("*/");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("public int getTouchValue(Direction dir) {");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("switch (dir) {");
    _builder_3.newLine();
    _builder_3.append("\t\t\t");
    _builder_3.append("case LEFT: {");
    _builder_3.newLine();
    _builder_3.append("\t\t\t\t");
    _builder_3.append("float[] sampleSize = new float[touchLeftSensor.sampleSize()];");
    _builder_3.newLine();
    _builder_3.append("\t\t\t\t");
    _builder_3.append("touchLeft.fetchSample(sampleSize, 0);");
    _builder_3.newLine();
    _builder_3.append("\t\t\t\t");
    _builder_3.append("return (int) sampleSize[0];");
    _builder_3.newLine();
    _builder_3.append("\t\t\t");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("\t\t\t");
    _builder_3.append("default: {");
    _builder_3.newLine();
    _builder_3.append("\t\t\t\t");
    _builder_3.append("// RIGHT");
    _builder_3.newLine();
    _builder_3.append("\t\t\t\t");
    _builder_3.append("float[] sampleSize = new float[touchRightSensor.sampleSize()];");
    _builder_3.newLine();
    _builder_3.append("\t\t\t\t");
    _builder_3.append("touchRight.fetchSample(sampleSize, 0);");
    _builder_3.newLine();
    _builder_3.append("\t\t\t\t");
    _builder_3.append("return (int) sampleSize[0];");
    _builder_3.newLine();
    _builder_3.append("\t\t\t");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("/**");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("* Get the current gyro value modulo 360");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("* @return The gyro value mod 360");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("*/");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("public int getGyroValue(){");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("float[] sampleSize = new float[gyroSensor.sampleSize()];");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("gyro.fetchSample(sampleSize, 0);");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("//FIXME: currently working modulo 360, but this should not be the default behavior.");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("return (int) (sampleSize[0] % 360);");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("/**");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("* Get the value of the ultrasonic sensor on the back.");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("* @return float of the current sample of the ultrasonic sensor on the back.");
    _builder_3.newLine();
    _builder_3.append("\t ");
    _builder_3.append("*/");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("public float getFrontUltraValue(){");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("float[] sampleSize = new float[frontUltraSensor.sampleSize()];");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("ultraBack.fetchSample(sampleSize, 0);");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("return sampleSize[0];");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("}");
    _builder_3.newLine();
    final String SlaveRobot = _builder_3.toString();
    switch (file) {
      case "Direction.java":
        return direction;
      case "MasterRobot.java":
        return MasterRobot;
      case "RASMAN2.java":
        return RASMAN2;
      case "SlaveRobot.java":
        return SlaveRobot;
    }
    return null;
  }
}
