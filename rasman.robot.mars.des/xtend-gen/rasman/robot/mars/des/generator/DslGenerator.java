/**
 * generated by Xtext 2.10.0
 */
package rasman.robot.mars.des.generator;

import com.google.common.base.Objects;
import java.util.ArrayList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import rasman.robot.mars.des.dsl.ColorSensor;
import rasman.robot.mars.des.dsl.ColorValue;
import rasman.robot.mars.des.dsl.CompareOperator;
import rasman.robot.mars.des.dsl.Ignorables;
import rasman.robot.mars.des.dsl.Mission;
import rasman.robot.mars.des.dsl.SensorType;
import rasman.robot.mars.des.dsl.Task;
import rasman.robot.mars.des.dsl.TouchSensor;
import rasman.robot.mars.des.dsl.UltrasonicSensor;
import rasman.robot.mars.des.dsl.timeUnitValue;
import rasman.robot.mars.des.generator.BluetoothPackageGenerator;
import rasman.robot.mars.des.generator.ColorBehaviorGenerator;
import rasman.robot.mars.des.generator.DefaultBehaviorGenerator;
import rasman.robot.mars.des.generator.HelperPackageGenerator;
import rasman.robot.mars.des.generator.MainPackageGenerator;
import rasman.robot.mars.des.generator.OnFrontUltraBehaviorGenerator;
import rasman.robot.mars.des.generator.RobotClassGenerator;
import rasman.robot.mars.des.generator.TouchBehaviorGenerator;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    EObject _head = IteratorExtensions.<EObject>head(_allContents);
    final Mission root = ((Mission) _head);
    fsa.generateFile("test.txt", "hallo");
    boolean _notEquals = (!Objects.equal(root, null));
    if (_notEquals) {
      URI _uRI = resource.getURI();
      String _lastSegment = _uRI.lastSegment();
      String _plus = ("generated/" + _lastSegment);
      final String path = (_plus + "/");
      final String srcPath = (path + "/src");
      ArrayList<String> defaultBehaviors = CollectionLiterals.<String>newArrayList("OnBackUltraBehavior.java", "OnDriveBehavior.java", "OnLightBehavior.java", "OnDistanceBehavior.java", "OnGrayTurnBehavior.java");
      EList<Task> _tasks = root.getTasks();
      for (final Task t : _tasks) {
        {
          SensorType _sensor = t.getSensor();
          System.out.println(_sensor);
          int _nrOfTimes = t.getNrOfTimes();
          String _plus_1 = ("MaxNr " + Integer.valueOf(_nrOfTimes));
          System.out.println(_plus_1);
          int _time = t.getTime();
          String _plus_2 = ("Expires after " + Integer.valueOf(_time));
          String _plus_3 = (_plus_2 + " ");
          timeUnitValue _timeunit = t.getTimeunit();
          String _plus_4 = (_plus_3 + _timeunit);
          System.out.println(_plus_4);
          SensorType _sensor_1 = t.getSensor();
          if ((_sensor_1 instanceof TouchSensor)) {
            String _name = t.getName();
            String _plus_5 = ("TouchSensorTask: " + _name);
            String _plus_6 = (_plus_5 + " AvoidingOtherObjects ");
            Ignorables _ignoreBehavior = t.getIgnoreBehavior();
            String _plus_7 = (_plus_6 + _ignoreBehavior);
            System.out.println(_plus_7);
            String _name_1 = t.getName();
            String _plus_8 = ((srcPath + "/behaviors/") + _name_1);
            String _plus_9 = (_plus_8 + "Behavior.java");
            CharSequence _behaviorFile = TouchBehaviorGenerator.toBehaviorFile(t);
            fsa.generateFile(_plus_9, _behaviorFile);
          } else {
            SensorType _sensor_2 = t.getSensor();
            if ((_sensor_2 instanceof ColorSensor)) {
              SensorType _sensor_3 = t.getSensor();
              ColorValue _key = ((ColorSensor) _sensor_3).getKey();
              String _plus_10 = ("ColorSensor" + _key);
              String _plus_11 = (_plus_10 + " ");
              SensorType _sensor_4 = t.getSensor();
              EList<ColorValue> _keys = ((ColorSensor) _sensor_4).getKeys();
              int _size = _keys.size();
              String _plus_12 = (_plus_11 + Integer.valueOf(_size));
              System.out.println(_plus_12);
              String _name_2 = t.getName();
              String _plus_13 = ((srcPath + "/behaviors/") + _name_2);
              String _plus_14 = (_plus_13 + "Behavior.java");
              CharSequence _behaviorFile_1 = ColorBehaviorGenerator.toBehaviorFile(t);
              fsa.generateFile(_plus_14, _behaviorFile_1);
            } else {
              SensorType _sensor_5 = t.getSensor();
              if ((_sensor_5 instanceof UltrasonicSensor)) {
                SensorType _sensor_6 = t.getSensor();
                CompareOperator _comparator = ((UltrasonicSensor) _sensor_6).getComparator();
                String _plus_15 = ("UltrasonicSensorBehavior " + _comparator);
                System.out.println(_plus_15);
                String _name_3 = t.getName();
                String _plus_16 = ((srcPath + "/behaviors/") + _name_3);
                String _plus_17 = (_plus_16 + "Behavior.java");
                CharSequence _behaviorFile_2 = OnFrontUltraBehaviorGenerator.toBehaviorFile(t);
                fsa.generateFile(_plus_17, _behaviorFile_2);
                ArrayList<String> _newArrayList = CollectionLiterals.<String>newArrayList("OnBackUltraBehavior.java", "OnDriveBehavior.java", "OnLightBehavior.java", "OnGrayTurnBehavior.java");
                defaultBehaviors = _newArrayList;
              }
            }
          }
        }
      }
      final ArrayList<String> bluetoothFiles = CollectionLiterals.<String>newArrayList("BluetoothConnector.java", "BluetoothConnectorContainer.java", "BluetoothSensorDataStreamer.java", "SlaveSensorData.java");
      for (final String file : bluetoothFiles) {
        String _createFile = BluetoothPackageGenerator.createFile(file);
        fsa.generateFile(((srcPath + "/bluetooth/") + file), _createFile);
      }
      for (final String file_1 : defaultBehaviors) {
        String _createFile_1 = DefaultBehaviorGenerator.createFile(file_1);
        fsa.generateFile(((srcPath + "/behaviors/") + file_1), _createFile_1);
      }
      final ArrayList<String> helperFiles = CollectionLiterals.<String>newArrayList("RGBColorWrapper.java", "IgnoreBehaviors.java", "IncrementIdOnTimeOutTask.java");
      for (final String file_2 : helperFiles) {
        String _generateHelpers = HelperPackageGenerator.generateHelpers(file_2);
        fsa.generateFile(((srcPath + "/helpers/") + file_2), _generateHelpers);
      }
      EList<Task> _tasks_1 = root.getTasks();
      String _java = RobotClassGenerator.toJava(_tasks_1);
      fsa.generateFile((srcPath + "/main/Robot.java"), _java);
      final ArrayList<String> mainFiles = CollectionLiterals.<String>newArrayList("Direction.java", "MasterRobot.java", "RASMAN2.java", "SlaveRobot.java");
      for (final String file_3 : mainFiles) {
        String _createFile_2 = MainPackageGenerator.createFile(file_3);
        fsa.generateFile(((srcPath + "/main/") + file_3), _createFile_2);
      }
    }
  }
}
