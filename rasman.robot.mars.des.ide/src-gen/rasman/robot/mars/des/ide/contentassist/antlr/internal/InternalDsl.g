/*
 * generated by Xtext 2.10.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package rasman.robot.mars.des.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package rasman.robot.mars.des.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import rasman.robot.mars.des.services.DslGrammarAccess;

}
@parser::members {
	private DslGrammarAccess grammarAccess;

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMission
entryRuleMission
:
{ before(grammarAccess.getMissionRule()); }
	 ruleMission
{ after(grammarAccess.getMissionRule()); } 
	 EOF 
;

// Rule Mission
ruleMission 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMissionAccess().getGroup()); }
		(rule__Mission__Group__0)
		{ after(grammarAccess.getMissionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTask
entryRuleTask
:
{ before(grammarAccess.getTaskRule()); }
	 ruleTask
{ after(grammarAccess.getTaskRule()); } 
	 EOF 
;

// Rule Task
ruleTask 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTaskAccess().getGroup()); }
		(rule__Task__Group__0)
		{ after(grammarAccess.getTaskAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletimeUnitValue
entryRuletimeUnitValue
:
{ before(grammarAccess.getTimeUnitValueRule()); }
	 ruletimeUnitValue
{ after(grammarAccess.getTimeUnitValueRule()); } 
	 EOF 
;

// Rule timeUnitValue
ruletimeUnitValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeUnitValueAccess().getUnitAssignment()); }
		(rule__TimeUnitValue__UnitAssignment)
		{ after(grammarAccess.getTimeUnitValueAccess().getUnitAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIgnorables
entryRuleIgnorables
:
{ before(grammarAccess.getIgnorablesRule()); }
	 ruleIgnorables
{ after(grammarAccess.getIgnorablesRule()); } 
	 EOF 
;

// Rule Ignorables
ruleIgnorables 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIgnorablesAccess().getAVOID_OBJECTSAssignment()); }
		(rule__Ignorables__AVOID_OBJECTSAssignment)
		{ after(grammarAccess.getIgnorablesAccess().getAVOID_OBJECTSAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensorType
entryRuleSensorType
:
{ before(grammarAccess.getSensorTypeRule()); }
	 ruleSensorType
{ after(grammarAccess.getSensorTypeRule()); } 
	 EOF 
;

// Rule SensorType
ruleSensorType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorTypeAccess().getAlternatives()); }
		(rule__SensorType__Alternatives)
		{ after(grammarAccess.getSensorTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColorSensor
entryRuleColorSensor
:
{ before(grammarAccess.getColorSensorRule()); }
	 ruleColorSensor
{ after(grammarAccess.getColorSensorRule()); } 
	 EOF 
;

// Rule ColorSensor
ruleColorSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColorSensorAccess().getAlternatives()); }
		(rule__ColorSensor__Alternatives)
		{ after(grammarAccess.getColorSensorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTouchSensor
entryRuleTouchSensor
:
{ before(grammarAccess.getTouchSensorRule()); }
	 ruleTouchSensor
{ after(grammarAccess.getTouchSensorRule()); } 
	 EOF 
;

// Rule TouchSensor
ruleTouchSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTouchSensorAccess().getGroup()); }
		(rule__TouchSensor__Group__0)
		{ after(grammarAccess.getTouchSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUltrasonicSensor
entryRuleUltrasonicSensor
:
{ before(grammarAccess.getUltrasonicSensorRule()); }
	 ruleUltrasonicSensor
{ after(grammarAccess.getUltrasonicSensorRule()); } 
	 EOF 
;

// Rule UltrasonicSensor
ruleUltrasonicSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUltrasonicSensorAccess().getGroup()); }
		(rule__UltrasonicSensor__Group__0)
		{ after(grammarAccess.getUltrasonicSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColorValue
entryRuleColorValue
:
{ before(grammarAccess.getColorValueRule()); }
	 ruleColorValue
{ after(grammarAccess.getColorValueRule()); } 
	 EOF 
;

// Rule ColorValue
ruleColorValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColorValueAccess().getColorAssignment()); }
		(rule__ColorValue__ColorAssignment)
		{ after(grammarAccess.getColorValueAccess().getColorAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule timeUnit
ruletimeUnit
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeUnitAccess().getAlternatives()); }
		(rule__TimeUnit__Alternatives)
		{ after(grammarAccess.getTimeUnitAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule TouchSensorSides
ruleTouchSensorSides
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTouchSensorSidesAccess().getAlternatives()); }
		(rule__TouchSensorSides__Alternatives)
		{ after(grammarAccess.getTouchSensorSidesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Actions
ruleActions
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionsAccess().getAlternatives()); }
		(rule__Actions__Alternatives)
		{ after(grammarAccess.getActionsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Colors
ruleColors
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorsAccess().getAlternatives()); }
		(rule__Colors__Alternatives)
		{ after(grammarAccess.getColorsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule CompareOperator
ruleCompareOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
		(rule__CompareOperator__Alternatives)
		{ after(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorTypeAccess().getColorSensorParserRuleCall_0()); }
		ruleColorSensor
		{ after(grammarAccess.getSensorTypeAccess().getColorSensorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSensorTypeAccess().getTouchSensorParserRuleCall_1()); }
		ruleTouchSensor
		{ after(grammarAccess.getSensorTypeAccess().getTouchSensorParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSensorTypeAccess().getUltrasonicSensorParserRuleCall_2()); }
		ruleUltrasonicSensor
		{ after(grammarAccess.getSensorTypeAccess().getUltrasonicSensorParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorSensorAccess().getGroup_0()); }
		(rule__ColorSensor__Group_0__0)
		{ after(grammarAccess.getColorSensorAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getColorSensorAccess().getGroup_1()); }
		(rule__ColorSensor__Group_1__0)
		{ after(grammarAccess.getColorSensorAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUnit__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeUnitAccess().getSECONDSEnumLiteralDeclaration_0()); }
		('s')
		{ after(grammarAccess.getTimeUnitAccess().getSECONDSEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitAccess().getMILISECONDSEnumLiteralDeclaration_1()); }
		('ms')
		{ after(grammarAccess.getTimeUnitAccess().getMILISECONDSEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TouchSensorSides__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTouchSensorSidesAccess().getLEFTEnumLiteralDeclaration_0()); }
		('LEFT')
		{ after(grammarAccess.getTouchSensorSidesAccess().getLEFTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTouchSensorSidesAccess().getRIGHTEnumLiteralDeclaration_1()); }
		('RIGHT')
		{ after(grammarAccess.getTouchSensorSidesAccess().getRIGHTEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getTouchSensorSidesAccess().getBOTHEnumLiteralDeclaration_2()); }
		('BOTH')
		{ after(grammarAccess.getTouchSensorSidesAccess().getBOTHEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getTouchSensorSidesAccess().getANYEnumLiteralDeclaration_3()); }
		('ANY')
		{ after(grammarAccess.getTouchSensorSidesAccess().getANYEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actions__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionsAccess().getROTATE_LEnumLiteralDeclaration_0()); }
		('ROTATELEFT')
		{ after(grammarAccess.getActionsAccess().getROTATE_LEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionsAccess().getROTATE_REnumLiteralDeclaration_1()); }
		('ROTATERIGHT')
		{ after(grammarAccess.getActionsAccess().getROTATE_REnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionsAccess().getDRIVE_FORWARDEnumLiteralDeclaration_2()); }
		('DRIVEFORWARD')
		{ after(grammarAccess.getActionsAccess().getDRIVE_FORWARDEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getActionsAccess().getDRIVE_BACKWARDEnumLiteralDeclaration_3()); }
		('DRIVEBACKWARD')
		{ after(grammarAccess.getActionsAccess().getDRIVE_BACKWARDEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getActionsAccess().getSTOP_DRIVINGEnumLiteralDeclaration_4()); }
		('STOP')
		{ after(grammarAccess.getActionsAccess().getSTOP_DRIVINGEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getActionsAccess().getTURN_AROUNDEnumLiteralDeclaration_5()); }
		('TURNAROUND')
		{ after(grammarAccess.getActionsAccess().getTURN_AROUNDEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getActionsAccess().getBEEPEnumLiteralDeclaration_6()); }
		('BEEP')
		{ after(grammarAccess.getActionsAccess().getBEEPEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getActionsAccess().getMEASUREEnumLiteralDeclaration_7()); }
		('MEASURE')
		{ after(grammarAccess.getActionsAccess().getMEASUREEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getActionsAccess().getDRIVETOEDGEEnumLiteralDeclaration_8()); }
		('DRIVETOEDGE')
		{ after(grammarAccess.getActionsAccess().getDRIVETOEDGEEnumLiteralDeclaration_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Colors__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorsAccess().getBLACKEnumLiteralDeclaration_0()); }
		('BLACK')
		{ after(grammarAccess.getColorsAccess().getBLACKEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getColorsAccess().getBLUEEnumLiteralDeclaration_1()); }
		('BLUE')
		{ after(grammarAccess.getColorsAccess().getBLUEEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getColorsAccess().getCYANEnumLiteralDeclaration_2()); }
		('CYAN')
		{ after(grammarAccess.getColorsAccess().getCYANEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getColorsAccess().getDARK_GRAYEnumLiteralDeclaration_3()); }
		('DARK_GRAY')
		{ after(grammarAccess.getColorsAccess().getDARK_GRAYEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getColorsAccess().getGRAYEnumLiteralDeclaration_4()); }
		('GRAY')
		{ after(grammarAccess.getColorsAccess().getGRAYEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getColorsAccess().getGREENEnumLiteralDeclaration_5()); }
		('GREEN')
		{ after(grammarAccess.getColorsAccess().getGREENEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getColorsAccess().getLIGHT_GRAYEnumLiteralDeclaration_6()); }
		('LIGHT_GRAY')
		{ after(grammarAccess.getColorsAccess().getLIGHT_GRAYEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getColorsAccess().getMAGENTAEnumLiteralDeclaration_7()); }
		('MAGENTA')
		{ after(grammarAccess.getColorsAccess().getMAGENTAEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getColorsAccess().getORANGEEnumLiteralDeclaration_8()); }
		('ORANGE')
		{ after(grammarAccess.getColorsAccess().getORANGEEnumLiteralDeclaration_8()); }
	)
	|
	(
		{ before(grammarAccess.getColorsAccess().getPINKEnumLiteralDeclaration_9()); }
		('PINK')
		{ after(grammarAccess.getColorsAccess().getPINKEnumLiteralDeclaration_9()); }
	)
	|
	(
		{ before(grammarAccess.getColorsAccess().getREDEnumLiteralDeclaration_10()); }
		('RED')
		{ after(grammarAccess.getColorsAccess().getREDEnumLiteralDeclaration_10()); }
	)
	|
	(
		{ before(grammarAccess.getColorsAccess().getWHITEEnumLiteralDeclaration_11()); }
		('WHITE')
		{ after(grammarAccess.getColorsAccess().getWHITEEnumLiteralDeclaration_11()); }
	)
	|
	(
		{ before(grammarAccess.getColorsAccess().getYELLOWEnumLiteralDeclaration_12()); }
		('YELLOW')
		{ after(grammarAccess.getColorsAccess().getYELLOWEnumLiteralDeclaration_12()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
		('==')
		{ after(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompareOperatorAccess().getNEQEnumLiteralDeclaration_1()); }
		('!=')
		{ after(grammarAccess.getCompareOperatorAccess().getNEQEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_2()); }
		('>=')
		{ after(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getCompareOperatorAccess().getGEnumLiteralDeclaration_3()); }
		('>')
		{ after(grammarAccess.getCompareOperatorAccess().getGEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_4()); }
		('<=')
		{ after(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getCompareOperatorAccess().getLEnumLiteralDeclaration_5()); }
		('<')
		{ after(grammarAccess.getCompareOperatorAccess().getLEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mission__Group__0__Impl
	rule__Mission__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMissionAccess().getMissionKeyword_0()); }
	'Mission:'
	{ after(grammarAccess.getMissionAccess().getMissionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mission__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getMissionAccess().getTasksAssignment_1()); }
		(rule__Mission__TasksAssignment_1)
		{ after(grammarAccess.getMissionAccess().getTasksAssignment_1()); }
	)
	(
		{ before(grammarAccess.getMissionAccess().getTasksAssignment_1()); }
		(rule__Mission__TasksAssignment_1)*
		{ after(grammarAccess.getMissionAccess().getTasksAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Task__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__0__Impl
	rule__Task__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getTaskKeyword_0()); }
	'Task:'
	{ after(grammarAccess.getTaskAccess().getTaskKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__1__Impl
	rule__Task__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getNameAssignment_1()); }
	(rule__Task__NameAssignment_1)
	{ after(grammarAccess.getTaskAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__2__Impl
	rule__Task__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getGroup_2()); }
	(rule__Task__Group_2__0)?
	{ after(grammarAccess.getTaskAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__3__Impl
	rule__Task__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getTaskAccess().getGroup_3()); }
		(rule__Task__Group_3__0)
		{ after(grammarAccess.getTaskAccess().getGroup_3()); }
	)
	(
		{ before(grammarAccess.getTaskAccess().getGroup_3()); }
		(rule__Task__Group_3__0)*
		{ after(grammarAccess.getTaskAccess().getGroup_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__4__Impl
	rule__Task__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getGroup_4()); }
	(rule__Task__Group_4__0)?
	{ after(grammarAccess.getTaskAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__5__Impl
	rule__Task__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getGroup_5()); }
	(rule__Task__Group_5__0)?
	{ after(grammarAccess.getTaskAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getGroup_6()); }
	(rule__Task__Group_6__0)?
	{ after(grammarAccess.getTaskAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Task__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_2__0__Impl
	rule__Task__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getUsesKeyword_2_0()); }
	'Uses:'
	{ after(grammarAccess.getTaskAccess().getUsesKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getSensorAssignment_2_1()); }
	(rule__Task__SensorAssignment_2_1)
	{ after(grammarAccess.getTaskAccess().getSensorAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Task__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_3__0__Impl
	rule__Task__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getDoKeyword_3_0()); }
	'Do:'
	{ after(grammarAccess.getTaskAccess().getDoKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getActionAssignment_3_1()); }
	(rule__Task__ActionAssignment_3_1)
	{ after(grammarAccess.getTaskAccess().getActionAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Task__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_4__0__Impl
	rule__Task__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getForKeyword_4_0()); }
	'For'
	{ after(grammarAccess.getTaskAccess().getForKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_4__1__Impl
	rule__Task__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getMaxKeyword_4_1()); }
	'Max:'
	{ after(grammarAccess.getTaskAccess().getMaxKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_4__2__Impl
	rule__Task__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getNrOfTimesAssignment_4_2()); }
	(rule__Task__NrOfTimesAssignment_4_2)
	{ after(grammarAccess.getTaskAccess().getNrOfTimesAssignment_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getTimesKeyword_4_3()); }
	'Times'
	{ after(grammarAccess.getTaskAccess().getTimesKeyword_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Task__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_5__0__Impl
	rule__Task__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getNotKeyword_5_0()); }
	'Not:'
	{ after(grammarAccess.getTaskAccess().getNotKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getIgnoreBehaviorAssignment_5_1()); }
	(rule__Task__IgnoreBehaviorAssignment_5_1)
	{ after(grammarAccess.getTaskAccess().getIgnoreBehaviorAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Task__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_6__0__Impl
	rule__Task__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getExpiresAfterKeyword_6_0()); }
	'ExpiresAfter:'
	{ after(grammarAccess.getTaskAccess().getExpiresAfterKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_6__1__Impl
	rule__Task__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getTimeAssignment_6_1()); }
	(rule__Task__TimeAssignment_6_1)
	{ after(grammarAccess.getTaskAccess().getTimeAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getTimeunitAssignment_6_2()); }
	(rule__Task__TimeunitAssignment_6_2)
	{ after(grammarAccess.getTaskAccess().getTimeunitAssignment_6_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColorSensor__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorSensor__Group_0__0__Impl
	rule__ColorSensor__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorSensorAccess().getColorSensorKeyword_0_0()); }
	'ColorSensor'
	{ after(grammarAccess.getColorSensorAccess().getColorSensorKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorSensor__Group_0__1__Impl
	rule__ColorSensor__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorSensorAccess().getOnKeyword_0_1()); }
	'On'
	{ after(grammarAccess.getColorSensorAccess().getOnKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorSensor__Group_0__2__Impl
	rule__ColorSensor__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorSensorAccess().getDistinctAssignment_0_2()); }
	(rule__ColorSensor__DistinctAssignment_0_2)?
	{ after(grammarAccess.getColorSensorAccess().getDistinctAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorSensor__Group_0__3__Impl
	rule__ColorSensor__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorSensorAccess().getDetectedColorKeyword_0_3()); }
	'DetectedColor'
	{ after(grammarAccess.getColorSensorAccess().getDetectedColorKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorSensor__Group_0__4__Impl
	rule__ColorSensor__Group_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorSensorAccess().getIsKeyword_0_4()); }
	'is:'
	{ after(grammarAccess.getColorSensorAccess().getIsKeyword_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_0__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorSensor__Group_0__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_0__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorSensorAccess().getKeyAssignment_0_5()); }
	(rule__ColorSensor__KeyAssignment_0_5)
	{ after(grammarAccess.getColorSensorAccess().getKeyAssignment_0_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColorSensor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorSensor__Group_1__0__Impl
	rule__ColorSensor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorSensorAccess().getColorSensorKeyword_1_0()); }
	'ColorSensor'
	{ after(grammarAccess.getColorSensorAccess().getColorSensorKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorSensor__Group_1__1__Impl
	rule__ColorSensor__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorSensorAccess().getOnKeyword_1_1()); }
	'On'
	{ after(grammarAccess.getColorSensorAccess().getOnKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorSensor__Group_1__2__Impl
	rule__ColorSensor__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorSensorAccess().getDistinctAssignment_1_2()); }
	(rule__ColorSensor__DistinctAssignment_1_2)?
	{ after(grammarAccess.getColorSensorAccess().getDistinctAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorSensor__Group_1__3__Impl
	rule__ColorSensor__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorSensorAccess().getDetectedColorsKeyword_1_3()); }
	'DetectedColors'
	{ after(grammarAccess.getColorSensorAccess().getDetectedColorsKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorSensor__Group_1__4__Impl
	rule__ColorSensor__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorSensorAccess().getAreKeyword_1_4()); }
	'are:'
	{ after(grammarAccess.getColorSensorAccess().getAreKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorSensor__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getColorSensorAccess().getKeysAssignment_1_5()); }
		(rule__ColorSensor__KeysAssignment_1_5)
		{ after(grammarAccess.getColorSensorAccess().getKeysAssignment_1_5()); }
	)
	(
		{ before(grammarAccess.getColorSensorAccess().getKeysAssignment_1_5()); }
		(rule__ColorSensor__KeysAssignment_1_5)*
		{ after(grammarAccess.getColorSensorAccess().getKeysAssignment_1_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TouchSensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TouchSensor__Group__0__Impl
	rule__TouchSensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TouchSensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTouchSensorAccess().getTouchSensorKeyword_0()); }
	'TouchSensor'
	{ after(grammarAccess.getTouchSensorAccess().getTouchSensorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TouchSensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TouchSensor__Group__1__Impl
	rule__TouchSensor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TouchSensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTouchSensorAccess().getOnKeyword_1()); }
	'On'
	{ after(grammarAccess.getTouchSensorAccess().getOnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TouchSensor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TouchSensor__Group__2__Impl
	rule__TouchSensor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TouchSensor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTouchSensorAccess().getTouchedSideKeyword_2()); }
	'TouchedSide:'
	{ after(grammarAccess.getTouchSensorAccess().getTouchedSideKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TouchSensor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TouchSensor__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TouchSensor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTouchSensorAccess().getKeyAssignment_3()); }
	(rule__TouchSensor__KeyAssignment_3)
	{ after(grammarAccess.getTouchSensorAccess().getKeyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UltrasonicSensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UltrasonicSensor__Group__0__Impl
	rule__UltrasonicSensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UltrasonicSensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUltrasonicSensorAccess().getUSensorKeyword_0()); }
	'USensor'
	{ after(grammarAccess.getUltrasonicSensorAccess().getUSensorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UltrasonicSensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UltrasonicSensor__Group__1__Impl
	rule__UltrasonicSensor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UltrasonicSensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUltrasonicSensorAccess().getOnKeyword_1()); }
	'On'
	{ after(grammarAccess.getUltrasonicSensorAccess().getOnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UltrasonicSensor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UltrasonicSensor__Group__2__Impl
	rule__UltrasonicSensor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UltrasonicSensor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUltrasonicSensorAccess().getDistanceKeyword_2()); }
	'Distance:'
	{ after(grammarAccess.getUltrasonicSensorAccess().getDistanceKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UltrasonicSensor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UltrasonicSensor__Group__3__Impl
	rule__UltrasonicSensor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__UltrasonicSensor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUltrasonicSensorAccess().getComparatorAssignment_3()); }
	(rule__UltrasonicSensor__ComparatorAssignment_3)
	{ after(grammarAccess.getUltrasonicSensorAccess().getComparatorAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UltrasonicSensor__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UltrasonicSensor__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UltrasonicSensor__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUltrasonicSensorAccess().getDistanceAssignment_4()); }
	(rule__UltrasonicSensor__DistanceAssignment_4)
	{ after(grammarAccess.getUltrasonicSensorAccess().getDistanceAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mission__TasksAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMissionAccess().getTasksTaskParserRuleCall_1_0()); }
		ruleTask
		{ after(grammarAccess.getMissionAccess().getTasksTaskParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__SensorAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getSensorSensorTypeParserRuleCall_2_1_0()); }
		ruleSensorType
		{ after(grammarAccess.getTaskAccess().getSensorSensorTypeParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__ActionAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getActionActionsEnumRuleCall_3_1_0()); }
		ruleActions
		{ after(grammarAccess.getTaskAccess().getActionActionsEnumRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__NrOfTimesAssignment_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getNrOfTimesINTTerminalRuleCall_4_2_0()); }
		RULE_INT
		{ after(grammarAccess.getTaskAccess().getNrOfTimesINTTerminalRuleCall_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__IgnoreBehaviorAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getIgnoreBehaviorIgnorablesParserRuleCall_5_1_0()); }
		ruleIgnorables
		{ after(grammarAccess.getTaskAccess().getIgnoreBehaviorIgnorablesParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__TimeAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getTimeINTTerminalRuleCall_6_1_0()); }
		RULE_INT
		{ after(grammarAccess.getTaskAccess().getTimeINTTerminalRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__TimeunitAssignment_6_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getTimeunitTimeUnitValueParserRuleCall_6_2_0()); }
		ruletimeUnitValue
		{ after(grammarAccess.getTaskAccess().getTimeunitTimeUnitValueParserRuleCall_6_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUnitValue__UnitAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeUnitValueAccess().getUnitTimeUnitEnumRuleCall_0()); }
		ruletimeUnit
		{ after(grammarAccess.getTimeUnitValueAccess().getUnitTimeUnitEnumRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ignorables__AVOID_OBJECTSAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIgnorablesAccess().getAVOID_OBJECTSAvoidObjectsKeyword_0()); }
		(
			{ before(grammarAccess.getIgnorablesAccess().getAVOID_OBJECTSAvoidObjectsKeyword_0()); }
			'AvoidObjects'
			{ after(grammarAccess.getIgnorablesAccess().getAVOID_OBJECTSAvoidObjectsKeyword_0()); }
		)
		{ after(grammarAccess.getIgnorablesAccess().getAVOID_OBJECTSAvoidObjectsKeyword_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__DistinctAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorSensorAccess().getDistinctNewKeyword_0_2_0()); }
		(
			{ before(grammarAccess.getColorSensorAccess().getDistinctNewKeyword_0_2_0()); }
			'New'
			{ after(grammarAccess.getColorSensorAccess().getDistinctNewKeyword_0_2_0()); }
		)
		{ after(grammarAccess.getColorSensorAccess().getDistinctNewKeyword_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__KeyAssignment_0_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorSensorAccess().getKeyColorValueParserRuleCall_0_5_0()); }
		ruleColorValue
		{ after(grammarAccess.getColorSensorAccess().getKeyColorValueParserRuleCall_0_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__DistinctAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorSensorAccess().getDistinctNewKeyword_1_2_0()); }
		(
			{ before(grammarAccess.getColorSensorAccess().getDistinctNewKeyword_1_2_0()); }
			'New'
			{ after(grammarAccess.getColorSensorAccess().getDistinctNewKeyword_1_2_0()); }
		)
		{ after(grammarAccess.getColorSensorAccess().getDistinctNewKeyword_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorSensor__KeysAssignment_1_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorSensorAccess().getKeysColorValueParserRuleCall_1_5_0()); }
		ruleColorValue
		{ after(grammarAccess.getColorSensorAccess().getKeysColorValueParserRuleCall_1_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TouchSensor__KeyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTouchSensorAccess().getKeyTouchSensorSidesEnumRuleCall_3_0()); }
		ruleTouchSensorSides
		{ after(grammarAccess.getTouchSensorAccess().getKeyTouchSensorSidesEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UltrasonicSensor__ComparatorAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUltrasonicSensorAccess().getComparatorCompareOperatorEnumRuleCall_3_0()); }
		ruleCompareOperator
		{ after(grammarAccess.getUltrasonicSensorAccess().getComparatorCompareOperatorEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UltrasonicSensor__DistanceAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUltrasonicSensorAccess().getDistanceDECIMALTerminalRuleCall_4_0()); }
		RULE_DECIMAL
		{ after(grammarAccess.getUltrasonicSensorAccess().getDistanceDECIMALTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorValue__ColorAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorValueAccess().getColorColorsEnumRuleCall_0()); }
		ruleColors
		{ after(grammarAccess.getColorValueAccess().getColorColorsEnumRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_DECIMAL : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
